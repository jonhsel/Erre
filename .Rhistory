#Vetor - estrutura com 1 dimensão e 1 tipo de dados
vetor <- c(1:10)
vetor
length(vetor)
mode(vetor)
class(vetor)
typeof(vetor)
matrix1 <- matrix(1:10, nrow = 2)
matrix1
length(matrix1)
mode(matrix1)
class(matrix1)
typeof(matrix1)
View(matrix1)
View(matrix1)
array1 <- array(1:5, dim = (3,3,3))
array1 <- array(1:5, dim = c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
#dataframe = é uma matrix com vários tipos de dados
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
#lista = coleção de diferentes objetos
lista1 <- list(a=matrix1, b=vetor)
lista1
#funcao
func1 <- function(x){
var1 <-x * x
return(var1)
}
func1(5)
texto <- 'isso eh uma string'
texto
class(texto)
x = as.character(3.14)
x
class(x)
#concatenando
nome = 'Dona'; sobrenome = 'Paulsen'
paste(nome, sobrenome)
cat(nome, sobrenome)
texto2 = '%s é atriz da serie suits ha %d'
class(texto2)
sprintf(texto2, 'Dona Pulsen', 8)
text
texto
substr(texto, start = 10, stop = 15)
?substr
substr(texto, start = 10, stop = 17)
substr(texto, start = 10, stop = 18)
substr(texto, start = 09, stop = 18)
#contar
nchar(texto)
#maiscula e minuscula
tolower(texto)
toupper(texto)
#split
strsplit(texto, NULL)
strsplit(texto, " ")
grepl(pattern = padrao, string1)
grepl(pattern = padrao, x = string1)
#detectando padroes
string1 <- "13 de junho 2021"
string2 <- "10 de junho 2021"
padrao <- 'junho 2021'
grepl(pattern = padrao, x = string1)
string2 <- "10 de junho 20201"
grepl(pattern = padrao, x=string2)
setwd(/home/jonhsel/RFundamentos/part1)
setwd('/home/jonhsel/RFundamentos/part1')
setwd('/Home/RFundamentos/part1')
#usando lista
lista1 <- list(a = (1:10), b = (45:75))
lista1
print(valor_a)
#Calculando o total de elementos com o for
valor_a = 0
valor_b = 0
for (i in lista1$a){
valor_a = valor_a + 1
}
for (i in lista1$b){
valor_b = valor_b + 1
}
print(valor_a)
print(valor_b)
valor_a = 0
valor_b = 0
for (i in lista1$a){
valor_a = valor_a + i
}
for (i in lista1$b){
valor_b = valor_b + i
}
print(valor_a)
print(valor_b)
#Calculando com sapply (pq é uma lista)
?sapply
sapply(lista1, sum)
#calculando a media
sapply(lista1, mean)
#apply
#criando a matrix
x <- matrix(rnorm(9), nrow=3, byrow = T)
x
apply(x, 1, mean) #calculando a media por linha
apply(x, 2, mean) #calculando a media por coluna
apply(x, 1, plot)
#Data Frame
escola <- data.frame(Aluno =c('Alan', 'Alice', 'Alana', 'Aline'),
Matematica = c(90, 80, 70, 60),
Geografia = c(100, 85, 96, 78),
Quimica = c(74, 85, 98, 77))
View(escola)
escola
escola$Geografia
#Calculando a media por aluno
#criar uma nova coluna com valores NA
escola$Media = NA
escola
#atribuir os valores na coluna media
escola$Media = apply(escola[, c(2,3,4)], 1, mean)
escola
#Arredondando os valores da coluna media
escola$Media = round(escola$Media)
escola
#======================
#tapply vs sqldf
install.packages('sqldf')
require(sqldf)
escola2 <- data.frame(Aluno = c('Alan', 'Alana', 'Aline', 'Alaor', 'Alan', 'Alana', 'Aline', 'Alaor'),
Semestre = c(1, 1, 1, 1, 2, 2, 2, 2),
matematica = c(90, 87, 88, 98, 78, 96, 99, 88),
Geografia = c(100, 87, 98, 78, 96, 55, 88, 74),
Quimica =   c(78, 65, 89, 45, 79, 99, 96, 97))
escola2
sqldf("select Aluno sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by Aluno ")
sqldf("select Aluno, sum(Matematica), sum(Geografia), sum(Quimica) from escola2 group by Aluno ")
#utilizando o tapply
tapply(c(escola2$matematica, escola2$Geografia, escola2$Quimica), escola2$Aluno, sum)
#utilizando o tapply
tapply(c(escola2$matematica), escola2$Aluno, sum)
##############
#by
sqldf("select aluno, sum(matematica), from escola2 group by semestre")
##############
#by
sqldf("select aluno, sum(matematica) from escola2 group by semestre")
by(escola2[, c(2,3,4)], escola2$Semestre, colSums)
